a = lm(I(scale(alpha_s_mean-alpha_r_mean)) ~ Co + A + H + E +Ti )
summary(a)
alpha_r_mean=numeric()
alpha_a_mean=numeric()
alpha_r_median=numeric()
alpha_a_median=numeric()
alpha_r_moda=numeric()
alpha_a_moda=numeric()
alpha_s_mean=numeric()
alpha_s_median=numeric()
for (ns in 1:96) {
# ns=1
ID = as.numeric(as.factor(DATA_TOTAL$SU))
#DATA_RL = DATA_TOTAL[DATA_TOTAL$COVID==0,]
#DATA_RL = DATA_TOTAL[ID==ns & ((DATA_TOTAL$fase)<2 ), ]
DATA_RL = DATA_TOTAL[ID==ns,]
ID = as.numeric(as.factor(DATA_RL$SU))
unique(ID)
nSUB = max(ID)
#nT = which(!DATA_RL$firstT)
#nT = length(DATA_RL$out_Bd1)
#DATA_RL$shift2=c(0,0,0,0,0)
dat <- dump.format(list(y=as.numeric(DATA_RL$Resp==1),
Bd1=DATA_RL$Bd1/10,
Bd2=DATA_RL$Bd2/10,
prob=DATA_RL$prob,
feedback=DATA_RL$F,
ID=ID,
nT=nT,
s=ID,
nSUB=nSUB,
firstT=DATA_RL$firstT,
shift=as.numeric(abs(DATA_RL$fase==1)),
Anosmia=DATA_RL$ANOSMIA,
Hospital=DATA_RL$HOSPITAL
#Tiempo=as.numeric(scale(DATA_RL$TIEMPO)),
#Edad=as.numeric(scale(DATA_RL$EDAD))
))
# Initialize chains
inits1 <- dump.format(list( mu.beta0=-0.5,mu.beta1=0.1,mu.rew=0.8,mu.gamma=0.9, alpha_a.mu = 0.5 ,alpha_r.mu = 0.4 ,.RNG.name="base::Super-Duper", .RNG.seed=99999 ))
inits2 <- dump.format(list( mu.beta0=0,mu.beta1=-0.1,mu.rew=0.9,mu.gamma=1.1, alpha_a.mu = 0.2 ,alpha_r.mu = 0.3 , .RNG.name="base::Wichmann-Hill", .RNG.seed=1234 ))
inits3 <- dump.format(list( mu.beta0=-5,mu.beta1=0.2,mu.rew=0.7,mu.gamma=1, alpha_a.mu = 0.4 , alpha_r.mu = 0.2 , .RNG.name="base::Mersenne-Twister", .RNG.seed=6666 ))
# Tell JAGS which latent variables to monitor
# In this case thet is a vector with Nsubjs positions (see JAGS code associated to this script)
monitor = c("beta0", "beta1", "rew", "gamma","deviance","alpha_a","alpha_r","alpha_s","alpha_A.mu","alpha_H.mu")
# Run the function that fits the models using JAGS
results6ah <- run.jags(model="model_rL_learn_1a_shift.txt",
monitor=monitor, data=dat, n.chains=3, method="parallel",
inits=c(inits1, inits2, inits3), plots = FALSE, burnin=10000, sample=1000, thin=10)
Wsumary = summary(results6ah)
chains = rbind(results6ah$mcmc[[1]], results6ah$mcmc[[2]], results6ah$mcmc[[3]])
alpha_a_mean[ns] = mean(chains[,"alpha_a"])
alpha_a_median[ns] = median(chains[,"alpha_a"])
alpha_r_mean[ns] = mean(chains[,"alpha_r"])
alpha_r_median[ns] = median(chains[,"alpha_r"])
#alpha_a_moda[ns] =Wsumary[6,6]
#alpha_r_moda[ns] =Wsumary[7,6]
alpha_s_mean[ns] = mean(chains[,"alpha_s"])
alpha_s_median[ns] = median(chains[,"alpha_s"])
}
H=numeric();
A=H
E=H
Ti=H
Co=H
ID = as.numeric(as.factor(DATA_TOTAL$SU))
for (ns in 1:96) {
H[ns] = unique(DATA_TOTAL$HOSPITAL[ID==ns])
A[ns] = unique(DATA_TOTAL$ANOSMIA[ID==ns])
E[ns] = unique(DATA_TOTAL$EDAD[ID==ns])
Ti[ns] = unique(DATA_TOTAL$TIEMPO[ID==ns])
Co[ns] = unique(DATA_TOTAL$COVID[ID==ns])
}
a = lm(I(scale(alpha_s_mean)) ~ Co + A + H + E +Ti )
summary(a)
a = lm(I(scale(alpha_r_mean+alpha_s_mean)) ~ Co + A + H + E +Ti )
summary(a)
alpha_r_mean=numeric()
alpha_a_mean=numeric()
alpha_r_median=numeric()
alpha_a_median=numeric()
alpha_r_moda=numeric()
alpha_a_moda=numeric()
alpha_s_mean=numeric()
alpha_s_median=numeric()
for (ns in 1:96) {
# ns=1
ID = as.numeric(as.factor(DATA_TOTAL$SU))
#DATA_RL = DATA_TOTAL[DATA_TOTAL$COVID==0,]
#DATA_RL = DATA_TOTAL[ID==ns & ((DATA_TOTAL$fase)<2 ), ]
DATA_RL = DATA_TOTAL[ID==ns,]
ID = as.numeric(as.factor(DATA_RL$SU))
unique(ID)
nSUB = max(ID)
#nT = which(!DATA_RL$firstT)
#nT = length(DATA_RL$out_Bd1)
#DATA_RL$shift2=c(0,0,0,0,0)
dat <- dump.format(list(y=as.numeric(DATA_RL$Resp==1),
Bd1=DATA_RL$Bd1/10,
Bd2=DATA_RL$Bd2/10,
prob=DATA_RL$prob,
feedback=DATA_RL$F,
ID=ID,
nT=nT,
s=ID,
nSUB=nSUB,
firstT=DATA_RL$firstT,
shift=as.numeric(abs(DATA_RL$fase==1)),
Anosmia=DATA_RL$ANOSMIA,
Hospital=DATA_RL$HOSPITAL
#Tiempo=as.numeric(scale(DATA_RL$TIEMPO)),
#Edad=as.numeric(scale(DATA_RL$EDAD))
))
# Initialize chains
inits1 <- dump.format(list( mu.beta0=-0.5,mu.beta1=0.1,mu.rew=0.8,mu.gamma=0.9, alpha_a.mu = 0.5 ,alpha_r.mu = 0.4 ,.RNG.name="base::Super-Duper", .RNG.seed=99999 ))
inits2 <- dump.format(list( mu.beta0=0,mu.beta1=-0.1,mu.rew=0.9,mu.gamma=1.1, alpha_a.mu = 0.2 ,alpha_r.mu = 0.3 , .RNG.name="base::Wichmann-Hill", .RNG.seed=1234 ))
inits3 <- dump.format(list( mu.beta0=-5,mu.beta1=0.2,mu.rew=0.7,mu.gamma=1, alpha_a.mu = 0.4 , alpha_r.mu = 0.2 , .RNG.name="base::Mersenne-Twister", .RNG.seed=6666 ))
# Tell JAGS which latent variables to monitor
# In this case thet is a vector with Nsubjs positions (see JAGS code associated to this script)
monitor = c("beta0", "beta1", "rew", "gamma","deviance","alpha_a","alpha_r","alpha_s","alpha_A.mu","alpha_H.mu")
# Run the function that fits the models using JAGS
results6ah <- run.jags(model="model_rL_learn_1a.txt",
monitor=monitor, data=dat, n.chains=3, method="parallel",
inits=c(inits1, inits2, inits3), plots = FALSE, burnin=10000, sample=1000, thin=10)
Wsumary = summary(results6ah)
chains = rbind(results6ah$mcmc[[1]], results6ah$mcmc[[2]], results6ah$mcmc[[3]])
alpha_a_mean[ns] = mean(chains[,"alpha_a"])
alpha_a_median[ns] = median(chains[,"alpha_a"])
alpha_r_mean[ns] = mean(chains[,"alpha_r"])
alpha_r_median[ns] = median(chains[,"alpha_r"])
#alpha_a_moda[ns] =Wsumary[6,6]
#alpha_r_moda[ns] =Wsumary[7,6]
alpha_s_mean[ns] = mean(chains[,"alpha_s"])
alpha_s_median[ns] = median(chains[,"alpha_s"])
}
alpha_r_mean=numeric()
alpha_a_mean=numeric()
alpha_r_median=numeric()
alpha_a_median=numeric()
alpha_r_moda=numeric()
alpha_a_moda=numeric()
alpha_s_mean=numeric()
alpha_s_median=numeric()
for (ns in 1:96) {
# ns=1
ID = as.numeric(as.factor(DATA_TOTAL$SU))
#DATA_RL = DATA_TOTAL[DATA_TOTAL$COVID==0,]
#DATA_RL = DATA_TOTAL[ID==ns & ((DATA_TOTAL$fase)<2 ), ]
DATA_RL = DATA_TOTAL[ID==ns,]
ID = as.numeric(as.factor(DATA_RL$SU))
unique(ID)
nSUB = max(ID)
#nT = which(!DATA_RL$firstT)
#nT = length(DATA_RL$out_Bd1)
#DATA_RL$shift2=c(0,0,0,0,0)
dat <- dump.format(list(y=as.numeric(DATA_RL$Resp==1),
Bd1=DATA_RL$Bd1/10,
Bd2=DATA_RL$Bd2/10,
prob=DATA_RL$prob,
feedback=DATA_RL$F,
ID=ID,
nT=nT,
s=ID,
nSUB=nSUB,
firstT=DATA_RL$firstT,
shift=as.numeric(abs(DATA_RL$fase==1)),
Anosmia=DATA_RL$ANOSMIA,
Hospital=DATA_RL$HOSPITAL
#Tiempo=as.numeric(scale(DATA_RL$TIEMPO)),
#Edad=as.numeric(scale(DATA_RL$EDAD))
))
# Initialize chains
inits1 <- dump.format(list( mu.beta0=-0.5,mu.beta1=0.1,mu.rew=0.8,mu.gamma=0.9, alpha_a.mu = 0.5 ,alpha_r.mu = 0.4 ,.RNG.name="base::Super-Duper", .RNG.seed=99999 ))
inits2 <- dump.format(list( mu.beta0=0,mu.beta1=-0.1,mu.rew=0.9,mu.gamma=1.1, alpha_a.mu = 0.2 ,alpha_r.mu = 0.3 , .RNG.name="base::Wichmann-Hill", .RNG.seed=1234 ))
inits3 <- dump.format(list( mu.beta0=-5,mu.beta1=0.2,mu.rew=0.7,mu.gamma=1, alpha_a.mu = 0.4 , alpha_r.mu = 0.2 , .RNG.name="base::Mersenne-Twister", .RNG.seed=6666 ))
# Tell JAGS which latent variables to monitor
# In this case thet is a vector with Nsubjs positions (see JAGS code associated to this script)
monitor = c("beta0", "beta1", "rew", "gamma","deviance","alpha_a","alpha_r","alpha_s","alpha_A.mu","alpha_H.mu")
# Run the function that fits the models using JAGS
results6ah <- run.jags(model="model_rL_learn_1a.txt",
monitor=monitor, data=dat, n.chains=3, method="parallel",
inits=c(inits1, inits2, inits3), plots = FALSE, burnin=10000, sample=1000, thin=10)
Wsumary = summary(results6ah)
chains = rbind(results6ah$mcmc[[1]], results6ah$mcmc[[2]], results6ah$mcmc[[3]])
alpha_a_mean[ns] = mean(chains[,"alpha_a"])
alpha_a_median[ns] = median(chains[,"alpha_a"])
alpha_r_mean[ns] = mean(chains[,"alpha_r"])
alpha_r_median[ns] = median(chains[,"alpha_r"])
#alpha_a_moda[ns] =Wsumary[6,6]
#alpha_r_moda[ns] =Wsumary[7,6]
#alpha_s_mean[ns] = mean(chains[,"alpha_s"])
#alpha_s_median[ns] = median(chains[,"alpha_s"])
}
H=numeric();
A=H
E=H
Ti=H
Co=H
ID = as.numeric(as.factor(DATA_TOTAL$SU))
for (ns in 1:96) {
H[ns] = unique(DATA_TOTAL$HOSPITAL[ID==ns])
A[ns] = unique(DATA_TOTAL$ANOSMIA[ID==ns])
E[ns] = unique(DATA_TOTAL$EDAD[ID==ns])
Ti[ns] = unique(DATA_TOTAL$TIEMPO[ID==ns])
Co[ns] = unique(DATA_TOTAL$COVID[ID==ns])
}
a = lm(I(scale(alpha_r_mean+alpha_s_mean)) ~ Co + A + H + E +Ti )
a = lm(I(scale(alpha_r_median-alpha_a_median)) ~ Co + A + H + E +Ti )
summary(a)
H=numeric();
A=H
E=H
Ti=H
Co=H
ID = as.numeric(as.factor(DATA_TOTAL$SU))
for (ns in 1:96) {
H[ns] = unique(DATA_TOTAL$HOSPITAL[ID==ns])
A[ns] = unique(DATA_TOTAL$ANOSMIA[ID==ns])
E[ns] = unique(DATA_TOTAL$EDAD[ID==ns])
Ti[ns] = unique(DATA_TOTAL$TIEMPO[ID==ns])
Co[ns] = unique(DATA_TOTAL$COVID[ID==ns])
}
a = lm(I(scale(alpha_r_median-alpha_a_median)) ~ Co + A + H + E +Ti )
summary(a)
parameters::standardize_parameters(a)
library(rjags)
# Modelo de regresión lineal bayesiana con JAGS
model_code <- "
model {
for (i in 1:N) {
y[i] ~ dnorm(mu[i], tau)
mu[i] <- b[1] + b[2]*x1[i] + b[3]*x2[i] + b[4]*x3[i] + b[5]*x4[i] + b[6]*x5[i]
}
# Prioridades
for (j in 1:6) {
b[j] ~ dnorm(0, 1e-6)
}
# Precisión de la distribución normal
tau ~ dgamma(0.001, 0.001)
}
"
# Combinar datos en una lista
data_list <- list(N = length(H),
y = as.numeric(scale(alpha_r_median-alpha_a_median)),
x1 = Co,
x2 = A,
x3 = H,
x4 = Ti,
x5 = E)
# Configuración del modelo y adaptación
model <- jags.model(textConnection(model_code), data = data_list, n.chains = 3)
update(model, 1000)  # Adaptación
# Muestreo
samples <- coda.samples(model, c("b", "tau","deviance"), n.iter = 5000, thin = 5)
# Resumen de resultados
summary(samples)
initial_values_list <- list(
dump.format(list(b = rnorm(6,1,1), tau = rgamma(1, 1, 1),.RNG.name="base::Mersenne-Twister", .RNG.seed=6666 )),
dump.format(list(b = rnorm(6,1,1), tau = rgamma(1, 1, 1), .RNG.name="base::Wichmann-Hill", .RNG.seed=1234)),
dump.format(list(b = rnorm(6,1,1), tau = rgamma(1, 1, 1),  .RNG.name="base::Mersenne-Twister", .RNG.seed=6666))
)
# Configuración del generador de números aleatorios para cada cadena
parallel_info <- list(seed = c(123, 456, 789))
# Configuración del modelo
model <- run.jags(model_code, data = data_list, n.chains = 3, monitor = c("b", "tau","deviance"),
burnin = 10000, sample=1000, thin=10,  inits = initial_values_list)
# Resumen de resultados
summary(model)
# readout the 3 chains from the "results" structure and combine them into a single matrix
# each of the resulting matrix represent a single MCMC sample, the columns represent the monitored variables
chains = rbind(model$mcmc[[1]], model$mcmc[[2]], model$mcmc[[3]])
DIC = mean(chains[,"deviance"]) + (sd(chains[,"deviance"])^2)/2
DIC  # 3623.963
library(ggplot2)
library(ggcharts)
library(patchwork)
library(latex2exp)
dataF <- data.frame(PS = c(chains[,"b[3]"], chains[,"b[4]"]), RG = c(rep("An",3000), rep("HR",3000)))
# Crear una columna para el color
dataF$Color <- ifelse(dataF$RG == "An", "lightblue", "orange")  # Puedes ajustar los colores según tus preferencias
# Gráfico de violines
AA = ggplot(dataF, aes(x = PS, y = RG, fill = Color)) +
geom_violin(trim = FALSE, alpha = 0.8, color=NA) +
geom_vline(xintercept = 0, linetype = "dashed", color = "red") +
labs(title = "Learnig Rate after a loss",
x = "Posterior Distribution",
y = "Regresors") +
theme_minimal() +
scale_fill_manual(values = c("lightblue", "orange")) +
geom_text(data=dataF[1,],aes(x = 0.75, y = 1.5,
label =  paste("p=", format(mean(chains[,"b[3]"]<0), digits  = 1))),
color = "black", size = 4, hjust = 0) +
geom_text(data=dataF[1,],aes(x = -1.75, y = 2.5,
label =  paste("p=", format(mean(chains[,"b[4]"]>0), digits  = 1))),
color = "black", size = 4, hjust = 0) +
guides(fill = "none")
Ml = lm(behavior_Shift ~ COVID + HOSPITAL + ANOSMIA + EDAD + TIEMPO + run ,
data=forIDXm[forIDXm$fase==1,])
summary(Ml)
# Combinar datos en una lista
data_list <- list(N = length(forIDXm$behavior_Shift[forIDXm$fase==1]),
y = forIDXm$behavior_Shift[forIDXm$fase==1],
x1 = forIDXm$COVID[forIDXm$fase==1],
x2 = forIDXm$ANOSMIA[forIDXm$fase==1],
x3 = forIDXm$HOSPITAL[forIDXm$fase==1],
x4 = forIDXm$TIEMPO[forIDXm$fase==1],
x5 = forIDXm$EDAD[forIDXm$fase==1] )
# Configuración del modelo y adaptación
model <- jags.model(textConnection(model_code), data = data_list, n.chains = 3)
update(model, 1000)  # Adaptación
# Muestreo
samples <- coda.samples(model, c("b", "tau","deviance"), n.iter = 5000, thin = 5)
# Resumen de resultados
summary(samples)
initial_values_list <- list(
dump.format(list(b = rnorm(6,1,1), tau = rgamma(1, 1, 1),.RNG.name="base::Mersenne-Twister", .RNG.seed=6666 )),
dump.format(list(b = rnorm(6,1,1), tau = rgamma(1, 1, 1), .RNG.name="base::Wichmann-Hill", .RNG.seed=1234)),
dump.format(list(b = rnorm(6,1,1), tau = rgamma(1, 1, 1),  .RNG.name="base::Mersenne-Twister", .RNG.seed=6666))
)
# Resumen de resultados
summary(model)
# Configuración del modelo
model2 <- run.jags(model_code, data = data_list, n.chains = 3, monitor = c("b", "tau","deviance"),
burnin = 10000, sample=1000, thin=10,  inits = initial_values_list)
# Resumen de resultados
summary(model2)
# readout the 3 chains from the "results" structure and combine them into a single matrix
# each of the resulting matrix represent a single MCMC sample, the columns represent the monitored variables
chains2 = rbind(model2$mcmc[[1]], model2$mcmc[[2]], model2$mcmc[[3]])
DIC = mean(chains[,"deviance"]) + (sd(chains[,"deviance"])^2)/2
DIC  # 3623.963
dataF <- data.frame(PS = c(chains2[,"b[3]"], chains2[,"b[4]"]), RG = c(rep("An",3000), rep("HR",3000)))
# Crear una columna para el color
dataF$Color <- ifelse(dataF$RG == "An", "lightblue", "orange")  # Puedes ajustar los colores según tus preferencias
# Gráfico de violines
BB = ggplot(dataF, aes(x = PS, y = RG, fill = Color)) +
geom_violin(trim = FALSE, alpha = 0.8, color=NA) +
geom_vline(xintercept = 0, linetype = "dashed", color = "red") +
labs(title = "Change after a loss during shift ",
x = "Posterior Distribution",
y = "Regresors") +
theme_minimal() +
scale_fill_manual(values = c("lightblue", "orange")) +
geom_text(data=dataF[1,],aes(x = 0.075, y = 1.5,
label =  paste("p=", format(mean(chains2[,"b[3]"]<0), digits  = 1))),
color = "black", size = 4, hjust = 0) +
geom_text(data=dataF[1,],aes(x = -0.175, y = 2.5,
label =  paste("p=", format(mean(chains2[,"b[4]"]>0), digits  = 1))),
color = "black", size = 4, hjust = 0) +
guides(fill = "none")
BB
layout <- "
A
B
"
#p1 + p2 + p3 + p4 +
#  plot_layout(design = layout)
library(gridExtra)
BB+AA+plot_layout(design = layout) + plot_annotation(tag_levels = 'A')
# Agregar etiquetas a los paneles
alpha_r_mean=numeric()
alpha_a_mean=numeric()
alpha_r_median=numeric()
alpha_a_median=numeric()
alpha_r_moda=numeric()
alpha_a_moda=numeric()
alpha_s_mean=numeric()
alpha_s_median=numeric()
for (ns in 1:96) {
# ns=1
ID = as.numeric(as.factor(DATA_TOTAL$SU))
#DATA_RL = DATA_TOTAL[DATA_TOTAL$COVID==0,]
#DATA_RL = DATA_TOTAL[ID==ns & ((DATA_TOTAL$fase)<2 ), ]
DATA_RL = DATA_TOTAL[ID==ns,]
ID = as.numeric(as.factor(DATA_RL$SU))
unique(ID)
nSUB = max(ID)
#nT = which(!DATA_RL$firstT)
#nT = length(DATA_RL$out_Bd1)
DATA_RL$shift2=0
dat <- dump.format(list(y=as.numeric(DATA_RL$Resp==1),
Bd1=DATA_RL$Bd1/10,
Bd2=DATA_RL$Bd2/10,
prob=DATA_RL$prob,
feedback=DATA_RL$F,
ID=ID,
nT=nT,
s=ID,
nSUB=nSUB,
firstT=DATA_RL$shift2,#firstT,
shift=as.numeric(abs(DATA_RL$fase==1)),
Anosmia=DATA_RL$ANOSMIA,
Hospital=DATA_RL$HOSPITAL
#Tiempo=as.numeric(scale(DATA_RL$TIEMPO)),
#Edad=as.numeric(scale(DATA_RL$EDAD))
))
# Initialize chains
inits1 <- dump.format(list( mu.beta0=-0.5,mu.beta1=0.1,mu.rew=0.8,mu.gamma=0.9, alpha_a.mu = 0.5 ,alpha_r.mu = 0.4 ,.RNG.name="base::Super-Duper", .RNG.seed=99999 ))
inits2 <- dump.format(list( mu.beta0=0,mu.beta1=-0.1,mu.rew=0.9,mu.gamma=1.1, alpha_a.mu = 0.2 ,alpha_r.mu = 0.3 , .RNG.name="base::Wichmann-Hill", .RNG.seed=1234 ))
inits3 <- dump.format(list( mu.beta0=-5,mu.beta1=0.2,mu.rew=0.7,mu.gamma=1, alpha_a.mu = 0.4 , alpha_r.mu = 0.2 , .RNG.name="base::Mersenne-Twister", .RNG.seed=6666 ))
# Tell JAGS which latent variables to monitor
# In this case thet is a vector with Nsubjs positions (see JAGS code associated to this script)
monitor = c("beta0", "beta1", "rew", "gamma","deviance","alpha_a","alpha_r","alpha_s","alpha_A.mu","alpha_H.mu")
# Run the function that fits the models using JAGS
results6ah <- run.jags(model="model_rL_learn_1a.txt",
monitor=monitor, data=dat, n.chains=3, method="parallel",
inits=c(inits1, inits2, inits3), plots = FALSE, burnin=10000, sample=1000, thin=10)
Wsumary = summary(results6ah)
chains = rbind(results6ah$mcmc[[1]], results6ah$mcmc[[2]], results6ah$mcmc[[3]])
alpha_a_mean[ns] = mean(chains[,"alpha_a"])
alpha_a_median[ns] = median(chains[,"alpha_a"])
alpha_r_mean[ns] = mean(chains[,"alpha_r"])
alpha_r_median[ns] = median(chains[,"alpha_r"])
#alpha_a_moda[ns] =Wsumary[6,6]
#alpha_r_moda[ns] =Wsumary[7,6]
#alpha_s_mean[ns] = mean(chains[,"alpha_s"])
#alpha_s_median[ns] = median(chains[,"alpha_s"])
}
H=numeric();
A=H
E=H
Ti=H
Co=H
ID = as.numeric(as.factor(DATA_TOTAL$SU))
for (ns in 1:96) {
H[ns] = unique(DATA_TOTAL$HOSPITAL[ID==ns])
A[ns] = unique(DATA_TOTAL$ANOSMIA[ID==ns])
E[ns] = unique(DATA_TOTAL$EDAD[ID==ns])
Ti[ns] = unique(DATA_TOTAL$TIEMPO[ID==ns])
Co[ns] = unique(DATA_TOTAL$COVID[ID==ns])
}
a = lm(I(scale(alpha_r_median-alpha_a_median)) ~ Co + A + H + E +Ti )
summary(a)
a = lm(I(scale(alpha_r_median)) ~ Co + A + H + E +Ti )
summary(a)
alpha_r_mean=numeric()
alpha_a_mean=numeric()
alpha_r_median=numeric()
alpha_a_median=numeric()
alpha_r_moda=numeric()
alpha_a_moda=numeric()
alpha_s_mean=numeric()
alpha_s_median=numeric()
for (ns in 1:96) {
# ns=1
ID = as.numeric(as.factor(DATA_TOTAL$SU))
#DATA_RL = DATA_TOTAL[DATA_TOTAL$COVID==0,]
#DATA_RL = DATA_TOTAL[ID==ns & ((DATA_TOTAL$fase)<2 ), ]
DATA_RL = DATA_TOTAL[ID==ns,]
ID = as.numeric(as.factor(DATA_RL$SU))
unique(ID)
nSUB = max(ID)
#nT = which(!DATA_RL$firstT)
#nT = length(DATA_RL$out_Bd1)
#DATA_RL$shift2=0
dat <- dump.format(list(y=as.numeric(DATA_RL$Resp==1),
Bd1=DATA_RL$Bd1/10,
Bd2=DATA_RL$Bd2/10,
prob=DATA_RL$prob,
feedback=DATA_RL$F,
ID=ID,
nT=nT,
s=ID,
nSUB=nSUB,
firstT=DATA_RL$firstT,
shift=as.numeric(abs(DATA_RL$fase==1)),
Anosmia=DATA_RL$ANOSMIA,
Hospital=DATA_RL$HOSPITAL
#Tiempo=as.numeric(scale(DATA_RL$TIEMPO)),
#Edad=as.numeric(scale(DATA_RL$EDAD))
))
# Initialize chains
inits1 <- dump.format(list( mu.beta0=-0.5,mu.beta1=0.1,mu.rew=0.8,mu.gamma=0.9, alpha_a.mu = 0.5 ,alpha_r.mu = 0.4 ,.RNG.name="base::Super-Duper", .RNG.seed=99999 ))
inits2 <- dump.format(list( mu.beta0=0,mu.beta1=-0.1,mu.rew=0.9,mu.gamma=1.1, alpha_a.mu = 0.2 ,alpha_r.mu = 0.3 , .RNG.name="base::Wichmann-Hill", .RNG.seed=1234 ))
inits3 <- dump.format(list( mu.beta0=-5,mu.beta1=0.2,mu.rew=0.7,mu.gamma=1, alpha_a.mu = 0.4 , alpha_r.mu = 0.2 , .RNG.name="base::Mersenne-Twister", .RNG.seed=6666 ))
# Tell JAGS which latent variables to monitor
# In this case thet is a vector with Nsubjs positions (see JAGS code associated to this script)
monitor = c("beta0", "beta1", "rew", "gamma","deviance","alpha_a","alpha_r","alpha_s","alpha_A.mu","alpha_H.mu")
# Run the function that fits the models using JAGS
results6ah <- run.jags(model="model_rL_learn_1a.txt",
monitor=monitor, data=dat, n.chains=3, method="parallel",
inits=c(inits1, inits2, inits3), plots = FALSE, burnin=10000, sample=1000, thin=10)
Wsumary = summary(results6ah)
chains = rbind(results6ah$mcmc[[1]], results6ah$mcmc[[2]], results6ah$mcmc[[3]])
alpha_a_mean[ns] = mean(chains[,"alpha_a"])
alpha_a_median[ns] = median(chains[,"alpha_a"])
alpha_r_mean[ns] = mean(chains[,"alpha_r"])
alpha_r_median[ns] = median(chains[,"alpha_r"])
#alpha_a_moda[ns] =Wsumary[6,6]
#alpha_r_moda[ns] =Wsumary[7,6]
#alpha_s_mean[ns] = mean(chains[,"alpha_s"])
#alpha_s_median[ns] = median(chains[,"alpha_s"])
}
H=numeric();
A=H
E=H
Ti=H
Co=H
ID = as.numeric(as.factor(DATA_TOTAL$SU))
for (ns in 1:96) {
H[ns] = unique(DATA_TOTAL$HOSPITAL[ID==ns])
A[ns] = unique(DATA_TOTAL$ANOSMIA[ID==ns])
E[ns] = unique(DATA_TOTAL$EDAD[ID==ns])
Ti[ns] = unique(DATA_TOTAL$TIEMPO[ID==ns])
Co[ns] = unique(DATA_TOTAL$COVID[ID==ns])
}
a = lm(I(scale(alpha_r_median)) ~ Co + A + H + E +Ti )
summary(a)
a = lm(I(scale(alpha_r_median-alpha_a_median)) ~ Co + A + H + E +Ti )
summary(a)
368/2
parameters::standardize_parameters(a)
